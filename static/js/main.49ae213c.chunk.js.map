{"version":3,"sources":["SearchAndFilter.js","CountryCard.js","CountriesGrid.js","CountryDetails.js","App.js","serviceWorker.js","index.js"],"names":["SearchAndFilter","className","type","placeholder","defaultValue","value","hidden","CountryCard","flag","name","population","region","capital","src","alt","toString","replace","showFirst","sortCompare","a","b","localeCompare","CountriesGrid","useState","cards","setCards","useEffect","Http","XMLHttpRequest","open","send","onreadystatechange","e","readyState","status","countries","JSON","parse","responseText","t0","performance","now","sort","t1","console","log","newCards","i","length","push","key","CountryDetails","currentUrl","window","location","href","indexOf","lastSlashIndex","lastIndexOf","substring","countryNameFromUrl","countryName","Error404","class","App","path","exact","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.49ae213c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SearchAndFilter.css\";\r\n\r\nfunction SearchAndFilter() {\r\n  return (\r\n    <div className=\"search-and-filter\">\r\n      <div className=\"search\">\r\n        <div className=\"search-icon-wrapper\">\r\n          <i className=\"search-icon fas fa-search\"></i>\r\n        </div>\r\n        <input type=\"text\" placeholder=\"Search for a country...\"/>\r\n      </div>\r\n      <select className=\"world-region\" defaultValue=\"filter by region\">\r\n        <option value=\"filter by region\" hidden>Filter by Region</option>\r\n        <option value=\"africa\">Africa</option>\r\n        <option value=\"america\">America</option>\r\n        <option value=\"asia\">Asia</option>\r\n        <option value=\"europe\">Europe</option>\r\n        <option value=\"oceania\">Oceania</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchAndFilter;\r\n","import React from \"react\";\r\nimport \"./CountryCard.css\";\r\n\r\nfunction CountryCard({flag, name, population, region, capital}) {\r\n  return (\r\n    <div className=\"CountryCard\">\r\n      <img src={flag} alt=\"flag\"/>\r\n      <div className=\"card-text\">\r\n        <h2>{name}</h2>\r\n        <div><strong>Population: </strong>{numberWithCommas(population)}</div>\r\n        <div><strong>Region: </strong>{region}</div>\r\n        <div><strong>Capital: </strong>{capital}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nexport default CountryCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CountryCard from \"./CountryCard.js\";\r\n\r\nfunction CountriesGrid() {\r\n\r\n  const [cards, setCards] = useState([]);\r\n\r\n  useEffect(() => { //on mount\r\n    // request all countries\r\n    const Http = new XMLHttpRequest();\r\n    const url='https://restcountries.eu/rest/v2/all';\r\n    Http.open(\"GET\", url);\r\n    Http.send();\r\n    Http.onreadystatechange = (e) => {\r\n      // wihtout this if cards would be set twice\r\n      if (Http.readyState === 4 && Http.status === 200)\r\n      {\r\n        const countries = JSON.parse(Http.responseText);\r\n        var t0 = performance.now();\r\n\r\n        countries.sort(sortCompare);\r\n        var t1 = performance.now();\r\n        console.log(\"Call to doSomething took \" + (t1 - t0) + \" milliseconds.\")\r\n\r\n        const newCards = [];\r\n        for(let i = 0; i < countries.length; i++) {\r\n          newCards.push(<CountryCard\r\n            key={i}\r\n            flag={countries[i].flag}\r\n            name={countries[i].name}\r\n            population={countries[i].population}\r\n            region={countries[i].region}\r\n            capital={countries[i].capital}\r\n          />);\r\n        }\r\n        setCards(newCards);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"countries-grid\">\r\n      {cards}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst showFirst = {};\r\nshowFirst[\"Russian Federation\"] = 1;\r\nshowFirst[\"United States of America\"] = 2;\r\nshowFirst[\"Brazil\"] = 3;\r\nshowFirst[\"Iceland\"] = 4;\r\n\r\nfunction sortCompare(a, b) {\r\n  if(showFirst[a.name] && showFirst[b.name]) {\r\n    if(showFirst[a.name] < showFirst[b.name]) {\r\n      return -1;\r\n    }\r\n    if (showFirst[a.name] > showFirst[b.name]) {\r\n      return 1;\r\n    }\r\n    else return 0;\r\n  }\r\n  if(showFirst[a.name] && !showFirst[b.name]) {\r\n    return -1;\r\n  }\r\n  if(!showFirst[a.name] && showFirst[b.name]) {\r\n    return 1;\r\n  }\r\n  else {\r\n    return a.name.localeCompare(b.name);\r\n  }\r\n}\r\n\r\nexport default CountriesGrid;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./CountryDetails.css\";\r\n\r\nfunction CountryDetails() {\r\n\r\n  const [countryName, setCountryName] = useState(countryNameFromUrl());\r\n\r\n  return (\r\n    <div className=\"CountryDetails\">\r\n      <a href=\"/\"><span>‚Üê</span>Back</a>\r\n      <h1>Hello {countryName}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction countryNameFromUrl() {\r\n  let currentUrl = window.location.href;\r\n  if(currentUrl.indexOf('details') === -1) {\r\n    return null;\r\n  }\r\n  currentUrl = currentUrl.replace(/\\/$/, '');\r\n  const lastSlashIndex = currentUrl.lastIndexOf('/');\r\n  return currentUrl.substring(lastSlashIndex + 1)\r\n}\r\n\r\nexport default CountryDetails;\r\n","import React from \"react\";\r\nimport SearchAndFilter from \"./SearchAndFilter.js\";\r\nimport CountriesGrid from \"./CountriesGrid.js\";\r\nimport CountryDetails from \"./CountryDetails.js\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Where in the world?</h1>\r\n      </header>\r\n      <main>\r\n        <Router>\r\n          <Switch>\r\n            <Route path=\"/rest-countries/details\">\r\n              <CountryDetails/>\r\n            </Route>\r\n            <Route exact path=\"/rest-countries/\">\r\n              <SearchAndFilter/>\r\n              <CountriesGrid/>\r\n            </Route>\r\n            <Route path=\"*\">\r\n              <Error404 />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Error404() {\r\n  return (\r\n    <h1 class=\"error404\">\r\n      Error 404: resource not found\r\n    </h1>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}