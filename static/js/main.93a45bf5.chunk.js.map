{"version":3,"sources":["SearchAndFilter.js","numberWithCommas.js","CountryCard.js","CountriesGrid.js","NameFromCode.js","CountryDetails.js","App.js","serviceWorker.js","index.js"],"names":["SearchAndFilter","setSearch","setFilter","delayedSetSearch","useCallback","debounce","event","target","value","className","type","placeholder","onChange","persist","hidden","numberWithCommas","x","toString","replace","CountryCard","flag","name","population","region","capital","src","alt","to","encodeURI","showFirst","sortCompare","a","b","localeCompare","CountriesGrid","search","filter","useState","cards","setCards","useEffect","Http","XMLHttpRequest","url","open","send","onreadystatechange","e","readyState","status","countries","JSON","parse","responseText","sort","c","i","length","push","key","cardsFromCountries","document","body","style","NameFromCode","code","setName","country","withRouter","location","setCountry","countryName","currentUrl","window","href","indexOf","lastSlashIndex","lastIndexOf","encodedName","substring","decodeURI","countryNameFromUrl","countryObj","populWithCommas","extractNames","arr","map","join","languages","currencies","borders","nativeName","subregion","topLevelDomain","App","path","exact","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.93a45bf5.chunk.js","sourcesContent":["import React, { useCallback } from \"react\";\r\nimport { debounce } from \"lodash\";\r\nimport \"./SearchAndFilter.css\";\r\n\r\n\r\nfunction SearchAndFilter({ setSearch, setFilter }) {\r\n\r\n  const delayedSetSearch = useCallback(debounce(\r\n    event => setSearch(event.target.value),\r\n  500), []); // 500 milliseconds delay\r\n\r\n  function onSearchChange(event) {\r\n    event.persist();\r\n    // only call setSearch when finished typing\r\n    delayedSetSearch(event);\r\n  }\r\n\r\n  function onFilterChange(event) {\r\n    setFilter(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"search-and-filter\">\r\n      <div className=\"search\">\r\n        <div className=\"search-icon-wrapper\">\r\n          <i className=\"search-icon fas fa-search\"></i>\r\n        </div>\r\n        <input type=\"text\" placeholder=\"Search for a country...\"\r\n          onChange={onSearchChange}\r\n        />\r\n      </div>\r\n      <select className=\"filter\" onChange={onFilterChange}>\r\n        <option value=\"filter by region\" hidden>Filter by Region</option>\r\n        <option value=\"Africa\">Africa</option>\r\n        <option value=\"Americas\">America</option>\r\n        <option value=\"Asia\">Asia</option>\r\n        <option value=\"Europe\">Europe</option>\r\n        <option value=\"Oceania\">Oceania</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchAndFilter;\r\n","export default function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport numberWithCommas from \"./numberWithCommas.js\";\r\nimport \"./CountryCard.css\";\r\n\r\nfunction CountryCard({flag, name, population, region, capital}) {\r\n  return (\r\n    <div className=\"CountryCard\">\r\n      <img src={flag} alt=\"flag\"/>\r\n      <div className=\"card-text\">\r\n        <h2><Link to={\"/rest-countries/details/\" + encodeURI(name)}>{name}</Link></h2>\r\n        <div><strong>Population: </strong>{numberWithCommas(population)}</div>\r\n        <div><strong>Region: </strong>{region}</div>\r\n        <div><strong>Capital: </strong>{capital}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CountryCard from \"./CountryCard.js\";\r\n\r\nfunction CountriesGrid({ search, filter }) {\r\n\r\n  const [cards, setCards] = useState([]);\r\n\r\n  useEffect(() => { //on mount and update to search and filter\r\n\r\n    const Http = new XMLHttpRequest();\r\n    let url = \"\";\r\n    if(search === \"\") {  // request all countries\r\n      url='https://restcountries.eu/rest/v2/all';\r\n    }\r\n    else {  //request search\r\n      url='https://restcountries.eu/rest/v2/name/' + encodeURI(search);\r\n    }\r\n    Http.open(\"GET\", url);\r\n    Http.send();\r\n    Http.onreadystatechange = (e) => {\r\n      // wihtout this if cards would be set twice\r\n      if (Http.readyState === 4 && Http.status === 200)\r\n      {\r\n        let countries = JSON.parse(Http.responseText);\r\n        countries.sort(sortCompare);\r\n        if(filter) {\r\n          countries = countries.filter(c => c.region === filter);\r\n        }\r\n        setCards(cardsFromCountries(countries));\r\n      }\r\n      else if(Http.status !== 200) {\r\n        setCards([]);\r\n      }\r\n    }\r\n  }, [search, filter]);\r\n\r\n  document.body.style = 'background: hsl(0, 0%, 98%);';\r\n  \r\n  return (\r\n    <div className=\"countries-grid\">\r\n      {cards}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction cardsFromCountries(countries) {\r\n  const cards = [];\r\n  for(let i = 0; i < countries.length; i++) {\r\n    cards.push(<CountryCard\r\n      key={countries[i].name}\r\n      flag={countries[i].flag}\r\n      name={countries[i].name}\r\n      population={countries[i].population}\r\n      region={countries[i].region}\r\n      capital={countries[i].capital}\r\n    />);\r\n  }\r\n  return cards;\r\n}\r\n\r\nconst showFirst = {};\r\nshowFirst[\"Russian Federation\"] = 1;\r\nshowFirst[\"United States of America\"] = 2;\r\nshowFirst[\"Brazil\"] = 3;\r\nshowFirst[\"Iceland\"] = 4;\r\n\r\nfunction sortCompare(a, b) {\r\n  if(showFirst[a.name] && showFirst[b.name]) {\r\n    if(showFirst[a.name] < showFirst[b.name]) {\r\n      return -1;\r\n    }\r\n    if (showFirst[a.name] > showFirst[b.name]) {\r\n      return 1;\r\n    }\r\n    else return 0;\r\n  }\r\n  if(showFirst[a.name] && !showFirst[b.name]) {\r\n    return -1;\r\n  }\r\n  if(!showFirst[a.name] && showFirst[b.name]) {\r\n    return 1;\r\n  }\r\n  else {\r\n    return a.name.localeCompare(b.name);\r\n  }\r\n}\r\n\r\nexport default CountriesGrid;\r\n","\r\n// Returns a named link to country details from 3-letter code\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction NameFromCode({ code }) {\r\n\r\n  const [name, setName] = useState(\"\");\r\n\r\n  useEffect(() => { //on mount and code change\r\n    const Http = new XMLHttpRequest();\r\n    const url='https://restcountries.eu/rest/v2/alpha/' + encodeURI(code);\r\n    Http.open(\"GET\", url);\r\n    Http.send();\r\n    Http.onreadystatechange = (e) => {\r\n      if (Http.readyState === 4 && Http.status === 200)\r\n      {\r\n        const country = JSON.parse(Http.responseText);\r\n        setName(country.name);\r\n      }\r\n    }\r\n  }, [code]);\r\n\r\n  return (\r\n    <Link to={\"/rest-countries/details/\" + encodeURI(name)}>\r\n      {name}\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default NameFromCode;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport NameFromCode from \"./NameFromCode.js\";\r\nimport numberWithCommas from \"./numberWithCommas.js\";\r\nimport \"./CountryDetails.css\";\r\n\r\nfunction CountryDetails({ location }) {\r\n\r\n  const [country, setCountry] = useState({});\r\n\r\n  useEffect(() => { //on mount and location change\r\n    const Http = new XMLHttpRequest();\r\n    const countryName = countryNameFromUrl();\r\n    const url='https://restcountries.eu/rest/v2/name/' + encodeURI(countryName);\r\n    Http.open(\"GET\", url);\r\n    Http.send();\r\n    Http.onreadystatechange = (e) => {\r\n      if (Http.readyState === 4 && Http.status === 200)\r\n      {\r\n        const countryObj = JSON.parse(Http.responseText)[0];\r\n        setCountry(countryObj);\r\n      }\r\n    }\r\n  }, [location]);\r\n\r\n  const populWithCommas = numberWithCommas(country.population || \"\");\r\n  const extractNames = arr => (arr || []).map(a => a.name).join(\", \");\r\n  const languages = extractNames(country.languages);\r\n  const currencies = extractNames(country.currencies);\r\n  const borders = (country.borders || []).map(\r\n    b => <NameFromCode code={b} key={b}/>\r\n  );\r\n\r\n  document.body.style = 'background: white;';\r\n\r\n  return (\r\n    <div className=\"details\">\r\n      <Link to=\"/rest-countries/\">\r\n        <i className=\"fas fa-long-arrow-alt-left\"></i>Back\r\n      </Link>\r\n      <section>\r\n        <img src={country.flag} alt=\"flag\"/>\r\n        <div className=\"details-text\">\r\n          <h1>{country.name}</h1>\r\n          <div className=\"columns\">\r\n            <div className=\"column1\">\r\n              <div><strong>Native Name: </strong>{country.nativeName}</div>\r\n              <div><strong>Population: </strong>{populWithCommas}</div>\r\n              <div><strong>Region: </strong>{country.region}</div>\r\n              <div><strong>Sub Region: </strong>{country.subregion}</div>\r\n              <div><strong>Capital: </strong>{country.capital}</div>\r\n            </div>\r\n            <div className=\"column2\">\r\n              <div><strong>Top Level Domain: </strong>{country.topLevelDomain}</div>\r\n              <div><strong>Currencies: </strong>{currencies}</div>\r\n              <div><strong>Languages: </strong>{languages}</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"border-countries\">\r\n            <strong>Border&nbsp;Countries: </strong>\r\n            <div className=\"actual-borders\">\r\n              {borders}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction countryNameFromUrl() {\r\n  let currentUrl = window.location.href;\r\n  if(currentUrl.indexOf('details') === -1) {\r\n    return null;\r\n  }\r\n  currentUrl = currentUrl.replace(/\\/$/, '');\r\n  const lastSlashIndex = currentUrl.lastIndexOf('/');\r\n  const encodedName = currentUrl.substring(lastSlashIndex + 1);\r\n  return decodeURI(encodedName);\r\n}\r\n\r\nexport default withRouter(CountryDetails);\r\n","import React, { useState } from \"react\";\r\nimport SearchAndFilter from \"./SearchAndFilter.js\";\r\nimport CountriesGrid from \"./CountriesGrid.js\";\r\nimport CountryDetails from \"./CountryDetails.js\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n\r\n  const [filter, setFilter] = useState(null);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Where in the world?</h1>\r\n      </header>\r\n      <main>\r\n        <Router>\r\n          <Switch>\r\n            <Route path=\"/rest-countries/details\">\r\n              <CountryDetails/>\r\n            </Route>\r\n            <Route exact path=\"/rest-countries/\">\r\n              <SearchAndFilter setSearch={setSearch} setFilter={setFilter}/>\r\n              <CountriesGrid search={search} filter={filter}/>\r\n            </Route>\r\n            <Route path=\"*\">\r\n              <h1 className=\"error404\">Error 404: page not found</h1>\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}